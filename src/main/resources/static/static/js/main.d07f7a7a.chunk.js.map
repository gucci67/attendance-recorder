{"version":3,"sources":["contexts/AttendanceContext.js","components/AttendanceTable.js","components/MonthButton.js","App.js","serviceWorker.js","index.js"],"names":["AttendanceContext","createContext","AttendanceContextProvider","props","useState","Date","month","setMonth","attendance","setAttendance","useEffect","monthString","toMonthString","axios","get","url","params","then","result","data","catch","console","log","getAttendance","getFullYear","monthNumber","getMonth","Provider","value","changeNextMonth","nextMonth","changePrevMonth","prevMonth","children","AttendanceHeader","bgcolor","allUserNames","map","userName","index","isWorking","todayAttendance","key","AttendanceRow","day","user","dayAttendance","users","find","x","come","comeTime","substring","leave","leaveTime","overtimeLevel","getTodayAttendance","today","getDay","date","includes","AttendanceTable","useContext","flatMap","reduce","userNames","indexOf","push","sort","length","className","Table","bordered","striped","MonthButton","Button","onClick","componentDidMount","document","title","App","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d07f7a7a.chunk.js","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const AttendanceContext = createContext();\r\n\r\nconst AttendanceContextProvider = (props) => {\r\n    const url = \"http://localhost:8080\";\r\n    const [month, setMonth] = useState(new Date());\r\n    const [attendance, setAttendance] = useState([]);\r\n    const getAttendance = () => {\r\n        const monthString = toMonthString(month);\r\n        axios\r\n            .get(url + \"/api/attendances\", { params: { month: monthString } })\r\n            .then((result) => {\r\n                setAttendance(result.data);\r\n            })\r\n            .catch(() => {\r\n                console.log(\"通信に失敗しました。\");\r\n            });\r\n    };\r\n    useEffect(() => {\r\n        getAttendance();\r\n    }, [month]);\r\n\r\n    const changeNextMonth = () => {\r\n        const nextMonth = month.setMonth(month.getMonth() + 1);\r\n        setMonth(new Date(nextMonth));\r\n    };\r\n\r\n    const changePrevMonth = () => {\r\n        const prevMonth = month.setMonth(month.getMonth() - 1);\r\n        setMonth(new Date(prevMonth));\r\n    };\r\n\r\n    const toMonthString = () => {\r\n        let monthString = month.getFullYear() + \"-\";\r\n        const monthNumber = month.getMonth() + 1;\r\n\r\n        if (monthNumber < 10) {\r\n            monthString += \"0\";\r\n        }\r\n\r\n        monthString += monthNumber;\r\n        return monthString;\r\n    };\r\n\r\n    return (\r\n        <AttendanceContext.Provider\r\n            value={{\r\n                month,\r\n                attendance,\r\n                changeNextMonth,\r\n                changePrevMonth,\r\n                toMonthString,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AttendanceContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AttendanceContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { Table } from \"reactstrap\";\r\nimport \"../App.css\";\r\nimport { AttendanceContext } from \"../contexts/AttendanceContext\";\r\n\r\nfunction AttendanceTable() {\r\n    const { attendance } = useContext(AttendanceContext);\r\n    const allUserNames = attendance\r\n        .flatMap((dayAttendance) => dayAttendance.users)\r\n        .map((user) => user.userName)\r\n        .reduce((userNames, userName) => {\r\n            if (userNames.indexOf(userName) === -1) {\r\n                userNames.push(userName);\r\n            }\r\n            return userNames;\r\n        }, [])\r\n        .sort();\r\n\r\n    if (allUserNames.length === 0) {\r\n        return <div className=\"h2 mt-2\">No Data</div>;\r\n    }\r\n\r\n    // その日の出勤状況を取得\r\n    const todayAttendance = getTodayAttendance(attendance);\r\n\r\n    return (\r\n        <Table bordered striped className=\"mt-2 sticky_table\">\r\n            <thead>\r\n                <AttendanceHeader\r\n                    allUserNames={allUserNames}\r\n                    todayAttendance={todayAttendance}\r\n                />\r\n            </thead>\r\n            <tbody>\r\n                {attendance &&\r\n                    attendance.map((dayAttendance, index) => {\r\n                        return (\r\n                            <AttendanceRow\r\n                                index={index}\r\n                                allUserNames={allUserNames}\r\n                                dayAttendance={dayAttendance}\r\n                            />\r\n                        );\r\n                    })}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nconst AttendanceHeader = (props) => {\r\n    return (\r\n        <tr>\r\n            <th bgcolor=\"#e6e6e6\">#</th>\r\n            {props.allUserNames &&\r\n                props.allUserNames.map((userName, index) => {\r\n                    return (\r\n                        <th\r\n                            bgcolor={\r\n                                // 出勤状況によって背景色を変える（出勤中：緑、退勤済み：グレー）\r\n                                isWorking(props.todayAttendance, userName)\r\n                                    ? \"#00d18b\"\r\n                                    : \"#e6e6e6\"\r\n                            }\r\n                            key={index}\r\n                        >\r\n                            {userName}\r\n                        </th>\r\n                    );\r\n                })}\r\n        </tr>\r\n    );\r\n};\r\n\r\nconst AttendanceRow = (props) => {\r\n    const day = props.index + 1;\r\n    return (\r\n        <tr key={props.index}>\r\n            <th>{day}</th>\r\n            {props.allUserNames &&\r\n                props.allUserNames.map((userName, index) => {\r\n                    const user = props.dayAttendance.users.find(\r\n                        (x) => x.userName === userName\r\n                    );\r\n                    if (user) {\r\n                        const come =\r\n                            (user.comeTime || \"\").substring(0, 5) || \"\";\r\n                        const leave =\r\n                            (user.leaveTime || \"\").substring(0, 5) || \"\";\r\n                        return (\r\n                            <td\r\n                                bgcolor={overtimeLevel(leave)}\r\n                                key={index}\r\n                            >{`${come} ~ ${leave}`}</td>\r\n                        );\r\n                    } else {\r\n                        return <td>~</td>;\r\n                    }\r\n                })}\r\n        </tr>\r\n    );\r\n};\r\n\r\nconst getTodayAttendance = (attendance) => {\r\n    let today = new Date().getDay();\r\n    if (today < 10) {\r\n        today = \"0\" + today;\r\n    }\r\n    return attendance.find((x) => x.date.includes(today, 7));\r\n};\r\n\r\nconst isWorking = (todayAttendance, userName) => {\r\n    const attendance = todayAttendance.users.find(\r\n        (x) => x.userName === userName\r\n    );\r\n    if (attendance) {\r\n        // その日の出勤情報に名前がある、かつ、退勤時間がない場合は出勤中とする\r\n        return attendance.leaveTime == null;\r\n    }\r\n    return false;\r\n};\r\n\r\nconst overtimeLevel = (leave) => {\r\n    if (leave) {\r\n        const leaveHour = leave.substring(0, 2);\r\n        switch (leaveHour) {\r\n            case \"22\":\r\n                return \"#faa\";\r\n            case \"21\":\r\n                return \"#fca\";\r\n            case \"20\":\r\n                return \"#ffa\";\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return \"\";\r\n};\r\n\r\nexport default AttendanceTable;\r\n","import React, { useContext } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { AttendanceContext } from \"../contexts/AttendanceContext\";\r\n\r\nfunction MonthButton() {\r\n    const {\r\n        month,\r\n        changePrevMonth,\r\n        changeNextMonth,\r\n        toMonthString,\r\n    } = useContext(AttendanceContext);\r\n    return (\r\n        <div>\r\n            <Button className=\"mx-2\" onClick={changePrevMonth}>\r\n                PREV\r\n            </Button>\r\n            <span className=\"h3\">{toMonthString(month)}</span>\r\n            <Button className=\"mx-2\" onClick={changeNextMonth}>\r\n                NEXT\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MonthButton;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container } from \"reactstrap\";\nimport \"./App.css\";\nimport AttendanceTable from \"./components/AttendanceTable\";\nimport MonthButton from \"./components/MonthButton\";\nimport AttendanceContextProvider from \"./contexts/AttendanceContext\";\n\nfunction App() {\n    componentDidMount();\n    return (\n        <div className=\"App\">\n            <Container fluid={true}>\n                <h2 className=\"mt-4\">Attendance Recorder</h2>\n                <AttendanceContextProvider>\n                    <MonthButton />\n                    <AttendanceTable />\n                </AttendanceContextProvider>\n            </Container>\n        </div>\n    );\n}\n\nconst componentDidMount = () => {\n    document.title = \"Attendance Recorder\";\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}